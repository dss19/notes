{"version":3,"sources":["serviceWorker.js","components/NotesInput.js","components/NotesItem.js","components/NotesList.js","App.js","components/Router.js","index.js"],"names":["Boolean","window","location","hostname","match","NotesInput","this","props","note","handleChange","emptyInput","handleSubmit","editNote","className","onSubmit","placeholder","value","onChange","type","Component","NotesItem","title","handleDelete","handleEdit","to","onClick","NotesList","notes","map","key","id","App","state","uuid","e","setState","target","preventDefault","newNote","updatedNotes","history","push","filteredNotes","filter","selectedNote","find","userNotes","JSON","parse","localStorage","getItem","nextProps","nextState","setItem","stringify","exact","path","render","withRouter","Router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20d45541.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass NotesInput extends Component {\r\n\trender() {\r\n\t\tconst {note, handleChange, emptyInput, handleSubmit, editNote} = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"input\">\r\n\t\t\t\t<form onSubmit={(note !== '') ? handleSubmit : emptyInput}>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"input__title\" \r\n\t\t\t\t\t\tplaceholder=\"Add your note\" \r\n\t\t\t\t\t\tvalue={note} \r\n\t\t\t\t\t\tonChange={handleChange} \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"input__btn\" \r\n\t\t\t\t\t\ttype=\"submit\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t>{editNote ? 'edit note' : 'save note'}</button>\r\n\t\t\t\t</form>\t\t\t\t\t\t\t\t                \r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NotesInput;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass NotesItem extends Component {\r\n\trender() {\r\n\t\tconst {title, handleDelete, handleEdit} = this.props\r\n\t\treturn (\r\n\t\t\t<li className=\"notes-item\">\r\n\t\t\t\t<Link to=\"/create-note\" className=\"notes-item__title\" onClick={handleEdit}>{title}</Link>\r\n\t\t\t\t<i className=\"delete fas fa-trash\" onClick={handleDelete}></i>\t\r\n\t\t\t</li>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NotesItem;","import React, { Component } from 'react';\r\nimport NotesItem from './NotesItem';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NotesList extends Component {\r\n\trender() {\r\n\t\tconst {notes, handleDelete, handleEdit} = this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"title\">Notes List</h1>\r\n\t\t\t\t<ul className=\"notes-list\">\t\t\t\t\t\t\r\n\t\t\t\t\t{notes.map(note => {\r\n\t\t\t\t\t\treturn <NotesItem \r\n\t\t\t\t\t\t\tkey={note.id} \r\n\t\t\t\t\t\t\ttitle={note.title}\r\n\t\t\t\t\t\t\thandleDelete={() => handleDelete(note.id)}\t\r\n\t\t\t\t\t\t\thandleEdit={() => handleEdit(note.id)}\t\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t})}\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t</ul>\r\n\t\t\t\t<Link to=\"/create-note\" className=\"notes-create\">create note</Link>\r\n\t\t\t</div>\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NotesList;","import React, { Component } from 'react';\nimport {Route, withRouter} from 'react-router-dom';\nimport uuid from 'uuid';\nimport './App.css';\nimport NotesInput from './components/NotesInput';\nimport NotesList from './components/NotesList';\n \n\nclass App extends Component {\n  // Начальное состояние\n  state = {\n    notes: [],\n    id: uuid(),\n    note: '',    \n    editNote: false\n  }\n  // Метод получения данных из поля ввода\n  handleChange = (e) => {\n    this.setState({\n      note: e.target.value      \n    });\n  }\n  \n  // Проверка на пустое поле ввода\n  emptyInput = (e) => {\n    e.preventDefault();\n    return false\n  }\n\n  // Метод создания новой заметки\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newNote = {\n      id: this.state.id,\n      title: this.state.note\n    }\n    const updatedNotes = [...this.state.notes, newNote];\n    this.setState({\n      notes: updatedNotes,\n      id: uuid(),\n      note: '',\n      editNote: false\n    });\n    this.props.history.push('/');\n    // window.location.href = '/';       \n  }   \n\n  // Метод удаления заметки\n  handleDelete = (id) => {\n    const filteredNotes = this.state.notes.filter(note => note.id !== id);\n    this.setState({\n      notes: filteredNotes\n    });\n  }\n\n  // Метод редакторования заметки\n  handleEdit = (id) => {\n    const filteredNotes = this.state.notes.filter(note => note.id !== id);\n    const selectedNote = this.state.notes.find(note => note.id === id);\n    this.setState({\n      notes: filteredNotes,\n      note: selectedNote.title,\n      editNote: true,\n      id: id\n    });\n  }\n\n  // Хранение данных в LocalStorage\n  userNotes;\n  componentDidMount() {\n    this.userNotes = JSON.parse(localStorage.getItem('notes'))\n    if (localStorage.getItem('notes')) {\n      this.setState({\n        notes: this.userNotes.notes\n      })\n    }\n  }\n  UNSAFE_componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem('notes', JSON.stringify(nextState))\n  }  \n\n  // Отрисовка компонент\n  render() {    \n    return (      \n      <div className=\"wrapper\">          \n          <Route exact path='/' render={() => <NotesList \n              notes={this.state.notes}\n              handleDelete={this.handleDelete} \n              handleEdit={this.handleEdit} \n            />}/>\n          <Route path='/create-note' render={() => <NotesInput \n              note={this.state.note} \n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editNote={this.state.editNote}\n              emptyInput={this.emptyInput}                          \n          />}/>          \n      </div> \n    );\n  }\n}\n\nexport default withRouter(App);","import React, { Component } from 'react';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport App from '../App';\r\nclass Router extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './components/Router';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}